{"version":3,"sources":["fbase.js","routes/Auth.js","components/Nweet.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","Auth","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","console","log","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","message","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","type","placeholder","required","onClick","prev","Nweet","nweetObj","isOwner","editing","setEditing","text","newNweet","setNewNweet","onDeleteClick","ok","window","confirm","doc","id","delete","toggleEditing","update","Home","userObj","nweet","setNweet","nweets","setNweets","useEffect","collection","onSnapshot","snapshot","nweetsArray","docs","map","add","createdAt","Date","now","creatorId","uid","maxLength","history","useHistory","signOut","push","Navigation","to","AppRouter","isLoggedIn","exact","path","Profile","App","init","setInit","setIsLoggedIn","setUserObj","onAuthStateChanged","user","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c211d5c.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\r\n    appId: process.env.REACT_APP_APP_ID\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\n\r\nexport const authService = firebase.auth();\r\nexport const dbService = firebase.firestore();\r\n","import { authService, firebaseInstance } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst Auth = () => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [newAccount, setNewAccount] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n    const onChange = (event) => {\r\n\r\n        const { target: { name, value } } = event;\r\n        console.log(value)\r\n        if (name === \"email\") {\r\n            setEmail(value);\r\n        } else if (name === \"password\") {\r\n            setPassword(value);\r\n        }\r\n\r\n    };\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault(); //기본행위 실행x\r\n        let data;\r\n        try {\r\n            if (newAccount) {\r\n                // account가 true면 새 계정 생성\r\n                data = await authService.createUserWithEmailAndPassword(email, password);\r\n            } else {\r\n                // 아니면 로그인\r\n                data = await authService.signInWithEmailAndPassword(email, password);\r\n            }\r\n        }\r\n        catch (error) {\r\n            setError(error.message);\r\n        }\r\n        console.log(data);\r\n    };\r\n    const toggleAccount = () => setNewAccount(prev => !prev); //이전값을 가져와서 그 값의 반대되는 것을 리턴\r\n    const onSocialClick = async (event) => {\r\n        const { target: { name }, } = event;\r\n        let provider;\r\n        if (name === \"google\") {\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n        } else if (name === \"github\") {\r\n            provider = new firebaseInstance.auth.GithubAuthProvider();\r\n        }\r\n        const data = await authService.signInWithPopup(provider);\r\n        console.log(data);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={onSubmit}>\r\n                <input type=\"email\" name=\"email\" placeholder=\"Email\" value={email} onChange={onChange} required />\r\n                <input type=\"password\" name=\"password\" placeholder=\"Password\" value={password} onChange={onChange} required />\r\n                <input type=\"submit\" value={newAccount ? \"Create Account\" : \"Log In\"} />\r\n                {error}\r\n            </form>\r\n            <span onClick={toggleAccount}>{newAccount ? \"Sign In\" : \"Create Account\"}</span>\r\n            <div>\r\n                <button onClick={onSocialClick} name=\"google\">Continue with Google</button>\r\n                <button onClick={onSocialClick} name=\"github\">Continue with Github</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default Auth;","import { dbService } from 'fbase';\r\nimport React, { useState } from 'react';\r\n\r\nconst Nweet = ({ nweetObj, isOwner }) => {\r\n    const [editing, setEditing] = useState(false);  // true  false로 edit모드인지 확인\r\n    const [newNweet, setNewNweet] = useState(nweetObj.text);  // input에 입력된 text 업데이트\r\n    const onDeleteClick = async () => {\r\n        const ok = window.confirm(\"정말 삭제하시겠슴둥?\");\r\n        console.log(ok)\r\n        if (ok) {\r\n            await dbService.doc(`nweets/${nweetObj.id}`).delete(); // documentPath = 위치\r\n        }\r\n    };\r\n    const toggleEditing = () => setEditing((prev) => !prev);\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        console.log(nweetObj, newNweet);\r\n        await dbService.doc(`nweets/${nweetObj.id}`).update({\r\n            text: newNweet,\r\n        });\r\n        setEditing(false); // submit하면 edit모드 끄기\r\n    };\r\n    const onChange = (event) => {\r\n        const { target: { value },\r\n        } = event;\r\n        setNewNweet(value);\r\n    };\r\n    return (\r\n        <div>\r\n            {editing ? (\r\n                <>\r\n                    <form onSubmit={onSubmit}>\r\n                        <input type=\"text\" onChange={onChange} placeholder=\"Edit your nweet\" value={newNweet} required />\r\n                        <input type=\"submit\" value=\"Upadte Nweet\" />\r\n                    </form>\r\n                    <button onClick={toggleEditing}>Cancel</button>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <h4>{nweetObj.text}</h4>\r\n                    {isOwner && (\r\n                        <>\r\n                            <button onClick={onDeleteClick}>Delete Nweet</button>\r\n                            <button onClick={toggleEditing}>Edit Nweet</button>\r\n                        </>\r\n                    )}\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\nexport default Nweet;","import Nweet from \"components/Nweet\";\r\nimport { dbService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst Home = ({ userObj }) => {\r\n    //console.log(userObj);\r\n    const [nweet, setNweet] = useState(\"\");\r\n    const [nweets, setNweets] = useState([]);\r\n\r\n    useEffect(() => { // component가 mount될때\r\n        dbService.collection(\"nweets\").onSnapshot(snapshot => {\r\n            const nweetsArray = snapshot.docs.map((doc) => ({\r\n                id: doc.id,\r\n                ...doc.data(),\r\n            }));\r\n            setNweets(nweetsArray);\r\n        });\r\n    }, []);\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        await dbService.collection(\"nweets\").add({\r\n            text: nweet,\r\n            createdAt: Date.now(),\r\n            creatorId: userObj.uid,\r\n        });\r\n        setNweet(\"\");\r\n    };\r\n    const onChange = (event) => {\r\n        const { target: { value }, } = event;    // event안의 target안의 value추출\r\n        setNweet(value);\r\n    };\r\n    return (\r\n        <div>\r\n            <form onSubmit={onSubmit}>\r\n                <input value={nweet} onChange={onChange} type=\"text\" placeholder=\"What's on your mind?\" maxLength={120} />\r\n                <input type=\"submit\" value=\"Nweet\" />\r\n            </form>\r\n            <div>\r\n                {nweets.map((nweet) => (\r\n                    <Nweet key={nweet.id} nweetObj={nweet} isOwner={nweet.creatorId === userObj.uid} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default Home;","import React from \"react\";\r\nimport { authService } from \"fbase\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nexport default () => {\r\n    const history = useHistory();\r\n    const onLogOutClick = () => {\r\n        authService.signOut()\r\n        history.push(\"/\");\r\n    };\r\n    return (\r\n        <>\r\n            <button onClick={onLogOutClick}>Log Out</button>\r\n        </>\r\n    );\r\n};","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Navigation = () => (\r\n    <nav>\r\n        <ul>\r\n            <li>\r\n                <Link to=\"/\">Home</Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/profile\">My Profile</Link>\r\n            </li>\r\n        </ul>\r\n    </nav>\r\n);\r\nexport default Navigation;","import React from \"react\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Auth from \"../routes/Auth\";\r\nimport Home from \"../routes/Home\";\r\nimport Profile from \"routes/Profile\";\r\nimport Navigation from \"components/Navigation\";\r\n\r\n\r\nconst AppRouter = ({ isLoggedIn, userObj }) => {\r\n    return (\r\n        <Router>\r\n            {isLoggedIn && <Navigation />}\r\n            <Switch>\r\n                {isLoggedIn ? (\r\n                    <>\r\n                        <Route exact path=\"/\">\r\n                            <Home userObj={userObj} />\r\n                        </Route>\r\n                        <Route exact path=\"/profile\">\r\n                            <Profile />\r\n                        </Route>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Route exact path=\"/\">\r\n                            <Auth />\r\n                        </Route>\r\n                    </>\r\n                )}\r\n            </Switch>\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default AppRouter;","import React, { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\n\nfunction App() {\n  const [init, setInit] = useState(false); //아직 초기화 x\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        setIsLoggedIn(true);\n        setUserObj(user);\n      } else {\n        setIsLoggedIn(false);\n      }\n      setInit(true);\n    });\n  }, [])\n  return (\n    <>\n      {init ? <AppRouter isLoggedIn={isLoggedIn} userObj={userObj} /> : \"Initializing\"}\n      <footer>&copy; {new Date().getFullYear()} Home witter</footer>\n    </>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n//import fbase from \"./fbase\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}